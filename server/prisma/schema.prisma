// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider      = "prisma-class-generator"
  output        = "./../src/_gen-prisma-classes"
  makeIndexFile = "false"
  dryRun        = "false"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           Int            @id @default(autoincrement())
  residentId   Int            @unique
  email        String         @unique @db.VarChar(100)
  password     String         @db.Text
  role         USER_ROLE      @default(RESIDENT)
  status       ACCOUNT_STATUS @default(ACTIVE)
  lastLoggedIn DateTime       @default(now()) @updatedAt @db.Timestamp(0)
  resident     Residents      @relation(fields: [residentId], references: [id])
}

model Residents {
  id         Int        @id @default(autoincrement())
  firstname  String     @db.VarChar(50)
  lastname   String     @db.VarChar(50)
  email      String     @unique @db.VarChar(100)
  contact    String     @db.VarChar(15)
  address    String     @db.VarChar(255)
  createdAt  DateTime   @default(now()) @db.Timestamp(0)
  Auth       Auth?
  Requests   Requests[]
  requestsId Int?
  Notifications Notifications[]

  EventNotifications EventNotifications[]
}

model Requests {
  id            Int             @id @default(autoincrement())
  residentId    Int
  requestType   REQUEST_TYPE
  status        REQUEST_STATUS  @default(PENDING)
  purpose       String          @db.VarChar(255)
  dateRequested DateTime        @default(now()) @db.Timestamp(0)
  dateCompleted DateTime?
  resident      Residents       @relation(fields: [residentId], references: [id])
  requestMode   REQUEST_MODE    @default(ONLINE)
  Notifications Notifications[]
}

model Officials {
  id           Int        @id @default(autoincrement())
  firstname    String     @db.VarChar(50)
  lastname     String     @db.VarChar(50)
  position     String     @db.VarChar(50)
  startTerm    DateTime
  endTerm      DateTime?
  achievements String?    @db.Text
  Projects     Projects[]
  projectsId   Int?
}

model Projects {
  id          Int        @id @default(autoincrement())
  projectName String     @db.VarChar(255)
  description String     @db.Text
  startDate   DateTime
  endDate     DateTime?
  officialId  Int
  official    Officials? @relation(fields: [officialId], references: [id])

}

model Notifications {
  id               Int                 @id @default(autoincrement())
  residentId       Int
  requestId        Int
  notificationType NOTIFICATION_TYPE
  message          String              @db.Text
  status           NOTIFICATION_STATUS
  sentAt           DateTime            @default(now()) @db.Timestamp(0)
  residents        Residents[]
  requests         Requests[]
}

model Events {
  id          Int      @id @default(autoincrement())
  eventName   String   @db.VarChar(255)
  description String   @db.Text
  eventDate   DateTime
  location    String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamp(0)

  EventNotifications EventNotifications[]
}

model EventNotifications {
  id               Int                 @id @default(autoincrement())
  residentId       Int
  eventId          Int
  notificationType NOTIFICATION_TYPE
  status           NOTIFICATION_STATUS
  sentAt           DateTime            @default(now()) @db.Timestamp(0)
  residents        Residents[]
  events           Events[]
}

enum USER_ROLE {
  ADMIN
  RESIDENT
}

enum ACCOUNT_STATUS {
  ACTIVE
  INACTIVE
}

enum REQUEST_TYPE {
  CLEARANCE
  CERTIFICATE
  PERMIT
}

enum REQUEST_STATUS {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum NOTIFICATION_TYPE {
  SMS
  EMAIL
}

enum NOTIFICATION_STATUS {
  SENT
  PENDING
}

enum REQUEST_MODE {
  WALKIN
  ONLINE
}
